{"ast":null,"code":"var _jsxFileName = \"/Users/wes/Projects/Programming/Week13/strangers-things/src/components/CreatePost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createPost } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreatePost = _ref => {\n  _s();\n\n  let {\n    token,\n    fetchPosts,\n    navigate\n  } = _ref;\n  const [ogTitle, setNewTitle] = useState('');\n  const [ogDescription, setNewDesc] = useState('');\n  const [ogLocation, setNewLocation] = useState('');\n  const [ogPrice, setNewPrice] = useState('');\n  const [ogwillDeliver, setNewWillDeliver] = useState(null); // const newPost = {\n  //   title: ogTitle,\n  //   description: ogDescription,\n  //   price: ogPrice,\n  //   location: ogLocation,\n  //   willDeliver: ogwillDeliver\n  // }\n\n  async function addPost() {\n    const newPost = {\n      title: ogTitle,\n      description: ogDescription,\n      price: ogPrice,\n      location: ogLocation,\n      willDeliver: ogwillDeliver\n    };\n    await createPost(token, newPost);\n    fetchPosts();\n    navigate(`/posts`);\n  }\n\n  return (\n    /*#__PURE__*/\n    // This needs to be a form that accepts the 5 request parameters for creating a post\n    // <button onClick={() => addPost()}>Create a New Post</button>\n    _jsxDEV(\"form\", {\n      onSubmit: ev => {\n        ev.preventDefault();\n        addPost();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"title\",\n        onChange: ev => setNewTitle(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"description\",\n        onChange: ev => setNewDesc(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"location\",\n        onChange: ev => setNewLocation(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"price\",\n        onChange: ev => setNewPrice(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Will Deliver?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: ogwillDeliver,\n        onChange: ev => setNewWillDeliver(ev.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Edit Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(CreatePost, \"Frjdr79A7R7c9Rd0m/9z86LEZMo=\");\n\n_c = CreatePost;\nexport default CreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"names":["React","useState","createPost","CreatePost","token","fetchPosts","navigate","ogTitle","setNewTitle","ogDescription","setNewDesc","ogLocation","setNewLocation","ogPrice","setNewPrice","ogwillDeliver","setNewWillDeliver","addPost","newPost","title","description","price","location","willDeliver","ev","preventDefault","target","value","checked"],"sources":["/Users/wes/Projects/Programming/Week13/strangers-things/src/components/CreatePost.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { createPost } from '../api';\n\nconst CreatePost = ({ token, fetchPosts, navigate }) => {\n  \n  const [ogTitle, setNewTitle] = useState('');\n  const [ogDescription, setNewDesc] = useState('');\n  const [ogLocation, setNewLocation] = useState('');\n  const [ogPrice, setNewPrice] = useState('');\n  const [ogwillDeliver, setNewWillDeliver] = useState(null);\n  \n  // const newPost = {\n  //   title: ogTitle,\n  //   description: ogDescription,\n  //   price: ogPrice,\n  //   location: ogLocation,\n  //   willDeliver: ogwillDeliver\n  // }\n  \n  async function addPost() {\n    const newPost = {\n      title: ogTitle,\n      description: ogDescription,\n      price: ogPrice,\n      location: ogLocation,\n      willDeliver: ogwillDeliver\n    }\n    \n    await createPost(token, newPost)\n    fetchPosts();\n    navigate(`/posts`)\n  }\n  \n  return (\n    // This needs to be a form that accepts the 5 request parameters for creating a post\n    // <button onClick={() => addPost()}>Create a New Post</button>\n    <form onSubmit={ (ev) => {\n      ev.preventDefault();\n      addPost();\n      \n    }}>\n      <input \n        type='text'\n        placeholder='title'\n        onChange={(ev) => setNewTitle(ev.target.value)}\n      />\n      <input \n        type='text'\n        placeholder='description'\n        onChange={(ev) => setNewDesc(ev.target.value)}\n      />\n      <input \n        type='text'\n        placeholder='location'\n        onChange={(ev) => setNewLocation(ev.target.value)}\n      />\n      <input \n        type='text'\n        placeholder='price'\n        onChange={(ev) => setNewPrice(ev.target.value)}\n      /><p>Will Deliver?</p>\n      <input \n        type='checkbox'\n        checked={ogwillDeliver}\n        onChange={(ev) => setNewWillDeliver(ev.target.checked)}\n      />\n      <button type='submit'>Edit Post</button>\n    </form>\n  )\n}\n\nexport default CreatePost;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,QAA3B;;;AAEA,MAAMC,UAAU,GAAG,QAAqC;EAAA;;EAAA,IAApC;IAAEC,KAAF;IAASC,UAAT;IAAqBC;EAArB,CAAoC;EAEtD,MAAM,CAACC,OAAD,EAAUC,WAAV,IAAyBP,QAAQ,CAAC,EAAD,CAAvC;EACA,MAAM,CAACQ,aAAD,EAAgBC,UAAhB,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACU,UAAD,EAAaC,cAAb,IAA+BX,QAAQ,CAAC,EAAD,CAA7C;EACA,MAAM,CAACY,OAAD,EAAUC,WAAV,IAAyBb,QAAQ,CAAC,EAAD,CAAvC;EACA,MAAM,CAACc,aAAD,EAAgBC,iBAAhB,IAAqCf,QAAQ,CAAC,IAAD,CAAnD,CANsD,CAQtD;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,eAAegB,OAAf,GAAyB;IACvB,MAAMC,OAAO,GAAG;MACdC,KAAK,EAAEZ,OADO;MAEda,WAAW,EAAEX,aAFC;MAGdY,KAAK,EAAER,OAHO;MAIdS,QAAQ,EAAEX,UAJI;MAKdY,WAAW,EAAER;IALC,CAAhB;IAQA,MAAMb,UAAU,CAACE,KAAD,EAAQc,OAAR,CAAhB;IACAb,UAAU;IACVC,QAAQ,CAAE,QAAF,CAAR;EACD;;EAED;IAAA;IACE;IACA;IACA;MAAM,QAAQ,EAAIkB,EAAD,IAAQ;QACvBA,EAAE,CAACC,cAAH;QACAR,OAAO;MAER,CAJD;MAAA,wBAKE;QACE,IAAI,EAAC,MADP;QAEE,WAAW,EAAC,OAFd;QAGE,QAAQ,EAAGO,EAAD,IAAQhB,WAAW,CAACgB,EAAE,CAACE,MAAH,CAAUC,KAAX;MAH/B;QAAA;QAAA;QAAA;MAAA,QALF,eAUE;QACE,IAAI,EAAC,MADP;QAEE,WAAW,EAAC,aAFd;QAGE,QAAQ,EAAGH,EAAD,IAAQd,UAAU,CAACc,EAAE,CAACE,MAAH,CAAUC,KAAX;MAH9B;QAAA;QAAA;QAAA;MAAA,QAVF,eAeE;QACE,IAAI,EAAC,MADP;QAEE,WAAW,EAAC,UAFd;QAGE,QAAQ,EAAGH,EAAD,IAAQZ,cAAc,CAACY,EAAE,CAACE,MAAH,CAAUC,KAAX;MAHlC;QAAA;QAAA;QAAA;MAAA,QAfF,eAoBE;QACE,IAAI,EAAC,MADP;QAEE,WAAW,EAAC,OAFd;QAGE,QAAQ,EAAGH,EAAD,IAAQV,WAAW,CAACU,EAAE,CAACE,MAAH,CAAUC,KAAX;MAH/B;QAAA;QAAA;QAAA;MAAA,QApBF,eAwBI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAxBJ,eAyBE;QACE,IAAI,EAAC,UADP;QAEE,OAAO,EAAEZ,aAFX;QAGE,QAAQ,EAAGS,EAAD,IAAQR,iBAAiB,CAACQ,EAAE,CAACE,MAAH,CAAUE,OAAX;MAHrC;QAAA;QAAA;QAAA;MAAA,QAzBF,eA8BE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QA9BF;IAAA;MAAA;MAAA;MAAA;IAAA;EAHF;AAoCD,CAlED;;GAAMzB,U;;KAAAA,U;AAoEN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}