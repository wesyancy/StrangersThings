{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error logging in user');\n  }\n};\nexport const getUserDetails = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error getting users details');\n  }\n};\nexport const createPost = async (token, _ref) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref;\n\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (ex) {\n    console.log('error creating a new post');\n  }\n};\nexport const updatePost = async _ref2 => {\n  let {\n    token,\n    title,\n    description,\n    price,\n    location,\n    willDeliver,\n    _id\n  } = _ref2;\n\n  try {\n    const response = await fetch(`${baseURL}/posts/${[_id]}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error updating post');\n  }\n};\nexport const deletePost = async (token, _id) => {\n  try {\n    const response = await fetch(`${baseURL}/posts/${[_id]}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    console.log('success');\n    return result;\n  } catch (ex) {\n    console.log('error deleting post');\n  }\n};\nexport const createMessage = async _ref3 => {\n  let {\n    postID,\n    token,\n    message\n  } = _ref3;\n\n  try {\n    const respons = await fetch(`${baseURL}/posts/${postID}/messages`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n  } catch (ex) {\n    console.log('error creating message');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","error","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","ex","getUserDetails","createPost","title","description","price","location","willDeliver","post","updatePost","_id","deletePost","createMessage","postID","message","respons"],"sources":["/Users/wes/Projects/Programming/Week13/strangers-things/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async(token) => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch(error) {\n    console.log('error getting all posts')\n  }\n}\n\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    })\n    const result = await response.json();\n    return result;\n  } catch(error) {\n    console.log('error registering user')\n  }\n}\n\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`,{\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    })\n    \n    const result = await response.json();\n    \n    return result;\n    \n  } catch(ex) {\n    console.log('error logging in user')\n  }\n}\n\n\nexport const getUserDetails = async (token) => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n    })\n    \n    const result = await response.json();\n    return result;\n    \n  } catch(ex) {\n    console.log('error getting users details')\n  }\n}\n\n\nexport const createPost = async (token, {title, description, price, location, willDeliver})=> {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    })\n    \n    const result = await response.json();\n    console.log(result)\n    return result;\n  } catch(ex) {\n    console.log('error creating a new post')\n  }\n}\n\n\nexport const updatePost = async ({token, title, description, price, location, willDeliver, _id})=> {\n  try {\n    const response = await fetch(`${baseURL}/posts/${[_id]}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    })\n    \n    const result = await response.json();\n    return result;  \n  } catch(ex) {\n    console.log('error updating post')\n  }\n}\n\nexport const deletePost = async (token, _id)=> {\n  try {\n    const response = await fetch(`${baseURL}/posts/${[_id]}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n    })\n    \n    const result = await response.json();\n    console.log ('success')\n    return result;  \n  } catch(ex) {\n    console.log('error deleting post')\n  }\n}\n\nexport const createMessage = async ({postID, token, message}) => {\n  try {\n    const respons = await fetch(`${baseURL}/posts/${postID}/messages`, {\n     method: 'POST',\n     headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n     },\n     body: JSON.stringify({\n      message\n     })\n    })\n    \n  } catch(ex) {\n    console.log('error creating message')\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}